{"version":3,"sources":["Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["CardExampleCard","weatherData","className","name","sys","country","main","temp","toPrecision","weather","description","wind","speed","humidity","App","useState","lat","setLat","long","setLong","data","setData","useEffect","fetchData","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","Weather","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAsBeA,EAnBS,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OACpB,qBAAKC,UAAU,YAAf,SACI,sBAAKA,UAAU,QAAf,UACI,mBAAGA,UAAU,mBAAb,+BACA,oBAAGA,UAAU,SAAb,UAAuBD,EAAYE,KAAnC,KAA2CF,EAAYG,IAAIC,WAE3D,sBAAKH,UAAU,OAAf,UACI,oBAAGA,UAAU,OAAb,UAAqBD,EAAYK,KAAKC,KAAKC,YAAY,GAAvD,WACA,mBAAGN,UAAU,cAAb,SAA4BD,EAAYQ,QAAQ,GAAGC,iBAGvD,oBAAGR,UAAU,OAAb,mBAA2BD,EAAYU,KAAKC,MAA5C,WACA,oBAAGV,UAAU,WAAb,uBAAmCD,EAAYK,KAAKO,SAApD,a,MC2BGC,MAtCf,WAEE,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAoBA,OAlBAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAASC,GAChDX,EAAOW,EAASC,OAAOC,UACvBX,EAAQS,EAASC,OAAOE,cAHV,SAMVC,MAAM,GAAD,OAAIC,0CAAJ,yBAAkDjB,EAAlD,gBAA6DE,EAA7D,+BAAwFe,qCAClGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAQgB,GACRC,QAAQC,IAAIF,MAVE,2CAAH,qDAcfd,MACC,CAACP,EAAIE,IAGN,sBAAKhB,UAAU,MAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,oBAAIA,UAAU,gBAAd,2BAEoB,oBAAbkB,EAAKd,KACZ,cAACkC,EAAD,CAASvC,YAAamB,IAEtB,4BCxBOqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.953b5be7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.css'\r\n\r\nconst CardExampleCard = ({weatherData}) => (\r\n    <div className=\"container\">\r\n        <div className=\"child\">\r\n            <p className=\"current-location\">Current location:</p>\r\n            <p className=\"header\">{weatherData.name}, {weatherData.sys.country}</p>\r\n\r\n            <div className=\"flex\">\r\n                <p className=\"temp\">{weatherData.main.temp.toPrecision(2)}&deg;C</p>\r\n                <p className=\"description\">{weatherData.weather[0].description}</p>\r\n            </div>\r\n\r\n            <p className=\"wind\">Wind: {weatherData.wind.speed} km/h</p>\r\n            <p className=\"humidity\">Humidity: {weatherData.main.humidity}%</p>\r\n\r\n        </div> \r\n    </div>\r\n)\r\n\r\n\r\nexport default CardExampleCard","import React, { useEffect, useState } from 'react'\nimport Weather from './Components/Weather'\nimport './App.css'\n\nfunction App() {\n\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        console.log(result);\n      });\n    }\n  \n    fetchData();\n  }, [lat,long])\n\n  return (\n    <div className=\"App\">\n      <div className=\"header-weather\">\n        <h3 className=\"child-weather\">Weather app</h3>\n      </div>\n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div></div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}